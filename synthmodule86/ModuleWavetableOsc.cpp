#include "Arduino.h"
#include "ModuleWavetableOsc.h"
#include "Defines.h"
#include "GlobalWavetables.h"
#include "GlobalIncrements.h"
#include "GlobalWavetable.h"

ModuleWavetableOsc::ModuleWavetableOsc()
{
  fixed_point_10_22_index = 0;
  phase = 0;

  // Initialize all inputs
  this->frequency_input = NULL;
  this->wavetable_input = NULL;
  this->module_output_bit = OUTPUT_16BIT;
}

uint16_t ModuleWavetableOsc::compute()
{
  // Read the frequency
  frequency = this->readInput(frequency_input, CONVERT_TO_10_BIT); // 10 bit ok... 11,12 glitch,,, convert will not scale if input is smaller than desired conversion
  wavetable = this->readInput(wavetable_input,CONVERT_TO_2_BIT); //convert 10, 12, 16 bit number to 2 bit
  wavetable = constrain(wavetable,0,3);

//  /*phase*/ = phase + frequency;
  // Read the wavetable input and map it to the appropriate range
//  wavetable = this->readInput(wavetable_input, 0, NUMBER_OF_WAVETABLES);

//  // Calculate the index into the wavetable
  fixed_point_10_22_index +=  pgm_read_dword_near(INCREMENTS + frequency) >> 2;
  if(fixed_point_10_22_index > WAVE_SAMPLES_SHIFTED_22) fixed_point_10_22_index -= WAVE_SAMPLES_SHIFTED_22;

  wavetable_index = fixed_point_10_22_index >> 22; // This should yeald a value between 0 and WAVE_SAMPLES (512)

  // This output will range from 0 to 4080 (which is a 12-bit value)

//    return((((wavetable_index&0b11011101)<<8)+0x8000)^0x8000);

   if(wavetable == 0)
   {
       //sine
       return pgm_read_word_near(sine + wavetable_index)^0x8000;
   }
   else if(wavetable == 1)
   {
       //square
       return((((wavetable_index&0x80)<<8)+0x4000)^0x8000);
   }
   else if(wavetable == 2)
   {
       //tri
       return((((wavetable_index&0b11111111)<<8)+0x8000)^0x8000);
   }
   else if(wavetable == 3)
   {
       //sine low
       //always start from zero or trouble!!
       return (( (pgm_read_word_near(sine + wavetable_index)^0x8000) - 0x8000)>> 1 ) + 0x8000;
   }

}


/*

// https://badgeek.github.io/js-graphy/

sine = [
0x0000, 0x0324, 0x0647, 0x096a, 0x0c8b, 0x0fab, 0x12c8, 0x15e2,
0x18f8, 0x1c0b, 0x1f19, 0x2223, 0x2528, 0x2826, 0x2b1f, 0x2e11,
0x30fb, 0x33de, 0x36ba, 0x398c, 0x3c56, 0x3f17, 0x41ce, 0x447a,
0x471c, 0x49b4, 0x4c3f, 0x4ebf, 0x5133, 0x539b, 0x55f5, 0x5842,
0x5a82, 0x5cb4, 0x5ed7, 0x60ec, 0x62f2, 0x64e8, 0x66cf, 0x68a6,
0x6a6d, 0x6c24, 0x6dca, 0x6f5f, 0x70e2, 0x7255, 0x73b5, 0x7504,
0x7641, 0x776c, 0x7884, 0x798a, 0x7a7d, 0x7b5d, 0x7c29, 0x7ce3,
0x7d8a, 0x7e1d, 0x7e9d, 0x7f09, 0x7f62, 0x7fa7, 0x7fd8, 0x7ff6,
0x7fff, 0x7ff6, 0x7fd8, 0x7fa7, 0x7f62, 0x7f09, 0x7e9d, 0x7e1d,
0x7d8a, 0x7ce3, 0x7c29, 0x7b5d, 0x7a7d, 0x798a, 0x7884, 0x776c,
0x7641, 0x7504, 0x73b5, 0x7255, 0x70e2, 0x6f5f, 0x6dca, 0x6c24,
0x6a6d, 0x68a6, 0x66cf, 0x64e8, 0x62f2, 0x60ec, 0x5ed7, 0x5cb4,
0x5a82, 0x5842, 0x55f5, 0x539b, 0x5133, 0x4ebf, 0x4c3f, 0x49b4,
0x471c, 0x447a, 0x41ce, 0x3f17, 0x3c56, 0x398c, 0x36ba, 0x33de,
0x30fb, 0x2e11, 0x2b1f, 0x2826, 0x2528, 0x2223, 0x1f19, 0x1c0b,
0x18f8, 0x15e2, 0x12c8, 0x0fab, 0x0c8b, 0x096a, 0x0647, 0x0324,
0x0000, 0xfcdc, 0xf9b9, 0xf696, 0xf375, 0xf055, 0xed38, 0xea1e,
0xe708, 0xe3f5, 0xe0e7, 0xdddd, 0xdad8, 0xd7da, 0xd4e1, 0xd1ef,
0xcf05, 0xcc22, 0xc946, 0xc674, 0xc3aa, 0xc0e9, 0xbe32, 0xbb86,
0xb8e4, 0xb64c, 0xb3c1, 0xb141, 0xaecd, 0xac65, 0xaa0b, 0xa7be,
0xa57e, 0xa34c, 0xa129, 0x9f14, 0x9d0e, 0x9b18, 0x9931, 0x975a,
0x9593, 0x93dc, 0x9236, 0x90a1, 0x8f1e, 0x8dab, 0x8c4b, 0x8afc,
0x89bf, 0x8894, 0x877c, 0x8676, 0x8583, 0x84a3, 0x83d7, 0x831d,
0x8276, 0x81e3, 0x8163, 0x80f7, 0x809e, 0x8059, 0x8028, 0x800a,
0x8000, 0x800a, 0x8028, 0x8059, 0x809e, 0x80f7, 0x8163, 0x81e3,
0x8276, 0x831d, 0x83d7, 0x84a3, 0x8583, 0x8676, 0x877c, 0x8894,
0x89bf, 0x8afc, 0x8c4b, 0x8dab, 0x8f1e, 0x90a1, 0x9236, 0x93dc,
0x9593, 0x975a, 0x9931, 0x9b18, 0x9d0e, 0x9f14, 0xa129, 0xa34c,
0xa57e, 0xa7be, 0xaa0b, 0xac65, 0xaecd, 0xb141, 0xb3c1, 0xb64c,
0xb8e4, 0xbb86, 0xbe32, 0xc0e9, 0xc3aa, 0xc674, 0xc946, 0xcc22,
0xcf05, 0xd1ef, 0xd4e1, 0xd7da, 0xdad8, 0xdddd, 0xe0e7, 0xe3f5,
0xe708, 0xea1e, 0xed38, 0xf055, 0xf375, 0xf696, 0xf9b9, 0xfcdc
];

// graph.add(function(wavetable_index) {
//  return((((wavetable_index&0x80)<<8)+0x4000)^0);
// });

graph.add(function(x) {
    var wavetable_index = Math.floor(x)%256;
    return (((((sine[wavetable_index]^0x8000)))));
});

//graph.add(function(x) { var wavetable_index = Math.floor(x)%256; return(((((sine[wavetable_index]^0x8000))))); });
// graph.add(function(x) { return (((((((((sine[Math.floor(x)%256])))))>>0))))^0x8000 ; });
// graph.add(function(x) { return (((((((((sine[Math.floor(x)%256]))))^0x8000)>>1)+16384))^16384)^0x8000 ; });
// graph.add(function(x) { return ((((((((((sine[Math.floor(x)%256]))))^0x8000)>>1)+0b11)^0x8000 ; });
// graph.add(function(x) { return ((((((((sine[Math.floor(x)%256]))))^0x8000)>>0)+0))^0x8000 ; });

graph.add(function(x) {
      return((((x&0x80)<<8)+0x4000));
});


*/
